package ESDChatBox.plugin;

/*Generated by MPS */

import jetbrains.mps.workbench.action.BaseAction;
import javax.swing.Icon;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import com.intellij.openapi.project.Project;
import com.intellij.openapi.actionSystem.CommonDataKeys;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.ide.actions.MPSCommonDataKeys;
import org.jetbrains.annotations.NotNull;
import java.awt.Toolkit;
import java.awt.datatransfer.DataFlavor;
import com.mbeddr.mpsutil.serializer.xml.serializer.NodeDeserializer;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import com.intellij.openapi.ui.Messages;

public class PasteCopiedNodeAction_Action extends BaseAction {
  private static final Icon ICON = null;

  public PasteCopiedNodeAction_Action() {
    super("Paste copied node from ESD chat", "", ICON);
    this.setIsAlwaysVisible(true);
    this.setExecuteOutsideCommand(false);
  }
  @Override
  public boolean isDumbAware() {
    return true;
  }
  @Override
  protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {
    if (!(super.collectActionData(event, _params))) {
      return false;
    }
    {
      Project p = event.getData(CommonDataKeys.PROJECT);
      if (p == null) {
        return false;
      }
    }
    {
      SModel model = event.getData(MPSCommonDataKeys.CONTEXT_MODEL);
      if (model == null) {
        return false;
      }
    }
    return true;
  }
  @Override
  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {
    try {
      String xml = ((String) Toolkit.getDefaultToolkit().getSystemClipboard().getData(DataFlavor.stringFlavor));
      NodeDeserializer des = NodeDeserializer.fromXML(xml, event.getData(MPSCommonDataKeys.CONTEXT_MODEL), "_");
      SModelOperations.addRootNode(event.getData(MPSCommonDataKeys.CONTEXT_MODEL), des.getNode());
    } catch (Exception ex) {
      Messages.showErrorDialog(ex.getMessage(), "Paste Failed.");
      ex.printStackTrace();
    }
  }
}
