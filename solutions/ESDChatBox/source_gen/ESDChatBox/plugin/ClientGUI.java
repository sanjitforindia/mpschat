package ESDChatBox.plugin;

/*Generated by MPS */

import javax.swing.JPanel;
import java.awt.event.ActionListener;
import javax.swing.JLabel;
import javax.swing.JTextField;
import javax.swing.JButton;
import net.miginfocom.swing.MigLayout;
import java.awt.Color;
import javax.swing.JScrollPane;
import java.awt.BorderLayout;
import javax.swing.ImageIcon;
import java.awt.event.MouseListener;
import java.awt.event.MouseEvent;
import javax.swing.JOptionPane;
import java.awt.datatransfer.Clipboard;
import java.awt.Toolkit;
import java.awt.datatransfer.StringSelection;
import java.awt.event.ActionEvent;

public class ClientGUI extends JPanel implements ActionListener {
  private static final long serialVersionUID = 1L;
  private JLabel label;
  private JTextField tf = new JTextField();
  private JTextField tfServer;
  private JTextField tfPort;
  private JButton login;
  private JButton logout;
  private JButton whoIsIn;
  private JPanel messageInformationPannel;
  private boolean connected;
  public static Client client;
  private String defaultPort;
  private String defaultHost;

  public ClientGUI(String host, String port) {
    setLayout(new MigLayout());
    defaultPort = port;
    defaultHost = host;
    // The NorthPanel with: 
    JPanel northPanel = new JPanel(new MigLayout());
    // the server name anmd the port number 
    JPanel serverAndPort = new JPanel(new MigLayout());
    // the two JTextField with default value for server address and port number 
    tfServer = new JTextField(host);
    tfPort = new JTextField("" + port);
    serverAndPort.add(new JLabel("Server Address:  "));
    serverAndPort.add(tfServer);
    serverAndPort.add(new JLabel("Port Number:  "));
    serverAndPort.add(tfPort, "wrap");
    serverAndPort.add(new JLabel(""));
    // adds the Server an port field to the GUI 
    northPanel.add(serverAndPort, "wrap");
    // the Label and the TextField 
    label = new JLabel("Enter your username : ");
    northPanel.add(label, "wrap");
    tf = new JTextField("Anonymous");
    northPanel.add(tf, "growx");
    add(northPanel, "wrap");
    // The CenterPanel which is the chat room 
    messageInformationPannel = new JPanel(new MigLayout());
    messageInformationPannel.setBackground(Color.WHITE);
    JPanel centerPanel = new JPanel(new MigLayout());
    centerPanel.add(new JScrollPane(messageInformationPannel));
    add(centerPanel, BorderLayout.CENTER);
    // the 3 buttons 
    login = new JButton("Login");
    login.addActionListener(this);
    logout = new JButton("Logout");
    logout.addActionListener(this);
    logout.setEnabled(false);
    // you have to login before being able to logout 
    whoIsIn = new JButton("Who is in");
    whoIsIn.addActionListener(this);
    whoIsIn.setEnabled(false);
    // you have to login before being able to Who is in 
    JPanel southPanel = new JPanel();
    southPanel.add(login);
    southPanel.add(logout);
    southPanel.add(whoIsIn);
    add(southPanel, BorderLayout.SOUTH);
    setVisible(true);
  }
  /*package*/ void append(String str) {
    String intermidiateStringToCopy = str.replaceAll(str.split("_____")[0], "");
    final String finalStringToCopy = intermidiateStringToCopy.replace("_____", "");
    final String finalStringToDisply = str.replace("_____", "");

    ChatLabel tempMessage = null;
    if (str.split("_____")[0] != null) {
      tempMessage = new ChatLabel();
      tempMessage.setText("<html>" + str.split("_____")[0] + "<font color=\"RED\">" + finalStringToCopy + "</font></html>");
      tempMessage.setToolTipText("Double Click To Copy The Node");
      tempMessage.setIcon(new ImageIcon("/Users/mastersanjit/Desktop/abc.png"));
    } else {
      tempMessage = new ChatLabel();
      tempMessage.setText(str);
    }

    messageInformationPannel.add(tempMessage, "wrap");
    tempMessage.addMouseListener(new MouseListener() {
      public void mouseClicked(MouseEvent p0) {
        JOptionPane.showMessageDialog(null, "Clicked");
        Clipboard clip = Toolkit.getDefaultToolkit().getSystemClipboard();
        StringSelection sel = new StringSelection(finalStringToCopy);
        clip.setContents(sel, null);
      }
      public void mousePressed(MouseEvent p0) {
      }
      public void mouseReleased(MouseEvent p0) {
      }
      public void mouseEntered(MouseEvent p0) {
      }
      public void mouseExited(MouseEvent p0) {
      }
    });
    messageInformationPannel.repaint();
    messageInformationPannel.updateUI();

  }

  public void connectionFailed() {
    login.setEnabled(true);
    logout.setEnabled(false);
    whoIsIn.setEnabled(false);
    label.setText("Enter your username below");
    tf.setText("Anonymous");
    // reset port number and host name as a construction time 
    tfPort.setText("" + defaultPort);
    tfServer.setText(defaultHost);
    // let the user change them 
    tfServer.setEditable(true);
    tfPort.setEditable(true);
    // don't react to a <CR> after the username 
    tf.removeActionListener(this);
    connected = false;
  }

  public void actionPerformed(ActionEvent e) {
    Object o = e.getSource();
    // if it the who is in button 
    if (o == whoIsIn) {
      client.sendMessage(new ChatMessage(ChatMessage.WHOISIN, ""));
      return;
    }
    // ok it is coming from the JTextField 
    if (o == login) {
      // ok it is a connection request 
      String username = tf.getText().trim();
      // empty username ignore it 
      if (username.length() == 0) {
        return;
      }
      // empty serverAddress ignore it 
      String server = tfServer.getText().trim();
      if (server.length() == 0) {
        return;
      }
      // empty or invalid port numer, ignore it 
      String portNumber = tfPort.getText().trim();
      if (portNumber.length() == 0) {
        return;
      }
      int port = 0;
      try {
        port = Integer.parseInt(portNumber);
      } catch (Exception en) {
        return;
        // nothing I can do if port number is not valid 
      }
      // try creating a new Client with GUI 
      client = new Client(server, port, username, this);
      // test if we can start the Client 
      if (!(client.start())) {
        return;
      }
      tf.setText("");
      label.setText("Enter your message below");
      connected = true;
      // disable login button 
      login.setEnabled(false);
      // enable the 2 buttons 
      logout.setEnabled(true);
      whoIsIn.setEnabled(true);
      // disable the Server and Port JTextField 
      tfServer.setEditable(false);
      tfPort.setEditable(false);
      // Action listener for when the user enter a message 
      tf.addActionListener(this);
      // if it is the Logout button 

    }
    if (o == logout) {
      client.sendMessage(new ChatMessage(ChatMessage.LOGOUT, ""));
      tfServer.setEditable(true);
      tfPort.setEditable(true);
      login.setEnabled(true);
      logout.setEnabled(false);
      whoIsIn.setEnabled(false);

      return;
    }
    if (connected) {
      // just have to send the message 
      client.sendMessage(new ChatMessage(ChatMessage.MESSAGE, tf.getText()));
      tf.setText("");
      return;
    } else {
    }

  }
  public static void main(String[] args) {
    new ClientGUI("localhost", "1500");
  }
}
