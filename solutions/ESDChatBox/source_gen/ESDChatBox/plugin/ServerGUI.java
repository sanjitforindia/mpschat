package ESDChatBox.plugin;

/*Generated by MPS */

import javax.swing.JFrame;
import java.awt.event.ActionListener;
import java.awt.event.WindowListener;
import javax.swing.JButton;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.JPanel;
import javax.swing.JLabel;
import java.awt.BorderLayout;
import java.awt.GridLayout;
import javax.swing.JScrollPane;
import java.awt.event.ActionEvent;
import java.awt.event.WindowEvent;

public class ServerGUI extends JFrame implements ActionListener, WindowListener {
  private static final long serialVersionUID = 1L;
  private JButton stopStart;
  private JTextArea chat;
  private JTextArea event;
  private JTextField tPortNumber;
  private Server server;
  /*package*/ ServerGUI(int port) {
    super("Chat Server");
    server = null;
    // in the NorthPanel the PortNumber the Start and Stop buttons 
    JPanel north = new JPanel();
    north.add(new JLabel("Port number: "));
    tPortNumber = new JTextField("" + port);
    north.add(tPortNumber);
    // to stop or start the server, we start with "Start" 
    stopStart = new JButton("Start");
    stopStart.addActionListener(this);
    north.add(stopStart);
    add(north, BorderLayout.NORTH);
    // the event and chat room 
    JPanel center = new JPanel(new GridLayout(2, 1));
    chat = new JTextArea(80, 80);
    chat.setEditable(false);
    appendRoom("Chat room.\n");
    center.add(new JScrollPane(chat));
    event = new JTextArea(80, 80);
    event.setEditable(false);
    appendEvent("Events log.\n");
    center.add(new JScrollPane(event));
    add(center);
    // need to be informed when the user click the close button on the frame 
    addWindowListener(this);
    setSize(400, 600);
    setVisible(true);
  }
  /*package*/ void appendRoom(String str) {
    chat.append(str);
    chat.setCaretPosition(chat.getText().length() - 1);
  }
  /*package*/ void appendEvent(String str) {
    event.append(str);
    event.setCaretPosition(chat.getText().length() - 1);
  }
  public void actionPerformed(ActionEvent e) {
    // if running we have to stop 
    if (server != null) {
      server.stop();
      server = null;
      tPortNumber.setEditable(true);
      stopStart.setText("Start");
      return;
    }
    // OK start the server	 
    int port;
    try {
      port = Integer.parseInt(tPortNumber.getText().trim());
    } catch (Exception er) {
      appendEvent("Invalid port number");
      return;
    }
    // ceate a new Server 
    server = new Server(port, this);
    // and start it as a thread 
    new ServerGUI.ServerRunning().start();
    stopStart.setText("Stop");
    tPortNumber.setEditable(false);
  }
  public static void runServerConfigUI() {
    // start server default port 1500 
    new ServerGUI(1500);
  }
  public void windowClosing(WindowEvent e) {
    // if my Server exist 
    if (server != null) {
      try {
        server.stop();
        // ask the server to close the conection 
      } catch (Exception eClose) {
      }
      server = null;
    }
    // dispose the frame 
    dispose();
  }
  public void windowClosed(WindowEvent e) {
  }
  public void windowOpened(WindowEvent e) {
  }
  public void windowIconified(WindowEvent e) {
  }
  public void windowDeiconified(WindowEvent e) {
  }
  public void windowActivated(WindowEvent e) {
  }
  public void windowDeactivated(WindowEvent e) {
  }
  /*package*/ class ServerRunning extends Thread {
    public void run() {
      server.start();
      // should execute until if fails 
      // the server failed 
      stopStart.setText("Start");
      tPortNumber.setEditable(true);
      appendEvent("Server crashed\n");
      server = null;
    }
  }
}
